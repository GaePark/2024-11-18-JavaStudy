package com.sist.exception;
/*
 * 263page
 * 예외 : 수정이 가능한 에러(가벼운 에러)
 *     = 사전적 의미 : 일반적이지 않은 상황
 *         => 프로그램에서 문제 발생
 *         => 사용자의 입력이나 제어 => 유효성 검사
 *         => 개발자의 실수
 *               ------------
 *               본인이 에러 => 찾기가 어렵다
 *               ---------------------------
 *               => 소스를 비교 (X)
 *               => Output 창
 *                            비정상 종료 : 방지하는 프로그램
 *                            -----------------------------
 *                            예외처리 => 정상 종료를 할 수 있게 만든다
 * 에러 : 수정이 불가능 (치명적인 에러) => 메모리 부족 , 인터넷 문제
 * -----------------------------------------------------------------
 * 자바 :
 *         javac : 컴파일 , java : 인터프리터 (런타입)
 *         컴파일에러 : 컴파일시에 에러 => 문법에러
 *         런타임에러 : 실행시에 에러 => 사용자 입력/출력
 *         논리적에러 : 웹에서 발생
 *                         ---------
 *                         실행은 된다 => 프로그램과 다르게 작동
 *        -------------------------------------------------
 *        프로그램에서 가장 중요
 *        => 가독성
 *        => 속도 => 최적화
 *        => 견고성 : 에러 발생시 종료하지 않고 정상 수행이 가능하게 만든다
 *              ===
 *              1) 에러를 사전에 방지하는 방법
 *                  --------------------------
 *                  우선시 => if문 => 처리가 어려운 문장
 *                  2) 예외처리가 동시
 *                       ** 변수 초기값
 *                       우선시 : 명시적 초기화
 *                       => 명시적 초기화가 안되는 경우=> 외부에서 읽어서
 *                       => 생성자 / 초기화 블록
 *                 => 가벼운 에러 => 수정이 가능한 에러
 *                 
 *                 => 0으로 나누는 경우 / 정수변환 / 배열범위 초과
 *                 => 메모리 할당 =< 주소가 ㅇ벗는 경우
 *                 => 매개변수에값 전송(다른 값을 전송)
 *                 =>클래스 형변환
 * 
 * => 256page
 *     예외처리의 종류
 *         예외복구 : try ~ catch~finally => 가급적이면 예외처리로 주로 사용
 *         예외회피 : throws => 메소드 선언 뒤에 서술
 *                       => 예약, 떠맡기기, 다음에 사용시에 예외처리를 해서 사용해러
 *                       => 라이브러리에서 주로 제공
 *         임의로 발생 : 테스트, 배포전에 확인
 *                           정상상태 유지
 *                  사용자 정의 예의 : 자바에서 지원하지 않는 예외처리
 *     예외처리 크기 (계층)=>catch => 순서지정
 *     
 *     예상에러 확인
 *     try
 *     {
 *     }catch(RintimeException e)
 *     {
 *     }
 *              
 *     예외를 동시에 처리
 *     try{
 *     } catch(문장 | 문장)
 *     {
 *     }
 * 
 *    일반적으로 사용
 *    try{
 *    }catch*execeptoion;
 *    }
 *    => 서버 / 오라클 연동
 *    try 
 *    {
 *        오라클 연결
 *        SQL문장 전송
 *        결과값 받기
 *    } catch(Exeception ex)
 *    {
 *    오류발생 => 확인
 *    } finally
 *    {
 *    오라클 닫기
 *    }
 * => 266page
 *     자바에서 원하는 클래스 (라이브러리)
 *     =CheckException: 컴파일시에 예외처리 여부 확인
 *         => 반드시 예외처리를 해야 사용이 가능
 *         => java.io / java.sql / java.net
 *                : IOException
 *                : SQLException
 *                : MalformedURLException
 *         => java.lang => 리플렉션
 *                : ClassNotFoundException
 *                : InterruptedException : 쓰레드 => 충동방지
 *         => javax.http.* => JSP => (X)
 *         => jakarata.http
 *              ---------------
 *              이클립스 => 톰캣 =>
 *              ------- 최신 => 10버전 => 스프링에서 (스프링부트)
 *              => 스프링 편집기 버전을 낮출수도 있다 => JDK / 톰캣 버전도 낮춰야함
 *     =UnCheckException: 예외처리여부 확인이 없다
 *         => 필요시에만 예외처리
 *         => NullPointerException : 클래스를 메모리 할당이 없는 경우
 *               선언만 한 경우 => 윈도우
 *         => NumberFormatException : 문자열 => 정수 변환
 *         => ArrayINdexOutOfBoundsException
 *         => ClassCastException
 *         => ArithemticException : 0으로 나눈 경우 처리
 *               => if
 *         => 한번에 처리 가능 : RuntimeException
 *         --------------------------------Exception
 *     계층구조
 *                            Object => 최상위 클래스 (모든 클래스는 Object)
 *                                l
 *                   ---------------------
 *                   l                           l
 *                Error                   Exception
 *                              Check          l               UnCheck
 *                              -----------------------------------
 *                              l                                               l
 *                           IOException                    RuntimeException
 *                           SQLException                              l
 *                           ...                                  NullPointerException
 *                                                                 ....
 *                                                                 ....
 *               => 상위클래스일수록 예외처리범위가 커진다.
 *         ------------------------------------면접
 *         => 5쟝 ~ 8장 사이에서 면접
 *                => Collection
 *         => 정의 : 사전에 에러를 방지 프로그램
 *         => 목적 : 프로그램의 비정상 종료를 방지
 */
public class 예외처리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
