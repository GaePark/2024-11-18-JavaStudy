/*
 * 자바에서 제공하는 제어문
 * = 조건문
 *   형식)
 *       단일 조건문 => 독립적으로 처리
 *       if(조건문) 조건문: true/false
 *                      ========== 부정연산자 / 논리연산자 / 비교연산자
 *       {
 *           조건이 true일때 실행 => false일때는 실행x
 *       }
 *       선택 조건문 => true / false를 나눠서 처리
 *        *** 웹에서 가장 많이 사용되는 조건문
 *        *** 조건문 만드는데 연습
 *        *** 기본 사이트 제작 => JSP(MVC) / Spring / Spring-Boot
 *            => Django
 *       if(조건문) => 로그인 된 경우
 *       {
 *           조건이 true일때 실행
 *       }
 *       else => 로그인 실패
 *       {
 *           조건이 false일때 실행
 *       }
 *       
 *       다중조건문 : 조건을 여러개 사용 => 해당 조건만 실행
 *                 => 메뉴 / 화면을 찾기
 *       if(조건문)
 *       {
 *           조건 true일때 처리문장 => 수행 종료
 *           main.jsp로 이동
 *                ㅣ false면 다음 조건을 찾는다.
 *       }
 *       eles if(조건문)
 *       {
 *           예약화면 ...
 *       }     ㅣ false
 *       else
 *       {
 *       	해당조건이 없는경우
 *          main.jsp
 *       }
 *       
 * = 선택문
 *   switch(정수/문자/문자열)
 *       => 문자 ==> '' ===> char
 *       => 문자열 ==> "" ===> String
 *       ** 윈도우 / 웹 => 송수신하는 모든 데이터는 String
 *          => 다른 데이터형이 필요할때는 변경 (String)
 *          => integer.parseInt("10") => 10
 *             Double.parseDouble("5.0") => 5.0
 *             Byte / Boolean ==> Wrapper
 *          => char[] => 제어 => String
 *             
 *   형식)
 *       switch(정수/문자/문자열)
 *       {
 *           case 값:
 *              수행문장
 *              break;
 *           case 값:
 *              수행문장
 *              break;
 *           case 값:
 *              수행문장
 *              break;
 *           default:
 *               수행문장
 *       } 
 *       => 무조건 break를 사용하는 것은 아니다.
 *           => 같은 수행문장을 수행할때는 break를 사용하지 않는다.
 *           => case에 중복된 데이터는 사용할 수 없다.
 *           => 다중 조건문으로 변경이 가능
 *           => 프로그램은 정답이 업다 => 잘 짠 프로그램
 *                                  ----------- 1. 가독성
 *                                              2. 최적화
 *                                              3. 유지보수
 *                                              *** 4. 공동모듈 => AOP / 인터넵트
 *                                                              ---
 *                                              => 반복을 최대한 제거
 *           
 * = 반복문 => 중복제거
 *   = for : 회수가 지정된 경우 => 웹 화면 UI
 *              ㅣfalse면 종료
 *         1    2     4
 *     for(초기값;조건식;증감식)
 *     {      ㅣ true
 *         반복 수행문장 => 증감식으로 이동
 *            3  
 *     }
 *     => 가장 많이 사용되는 반복문
 *     => 웹에서는 특별한 경우가 아니면 => 이중 for문을 사용하지 않는다.
 *     => 웹 : 송수신
 *             어떤 값을 보낼지 / 어떤 값을 받을 지..
 *             => 연습 : 네트워크 (웹)
 *     
 *     
 *   = while : 회수가 지정이 안된 상태 => 데이터베이스 / 파일읽기
 *     => 먼저 조건을 검색 => 한번도 실행이 안되는 경우도 있다.
 *     
 *     초기값
 *     while(조건문)
 *     {             = true => {}안으로 진입
 *                   = false => 종료
 *        반복 수행문장
 *        증감식       => 조건검색 요청 => 
 *     }
 *     
 *     while(true)
 *     {
 *         반복수행문장
 *         => 종료하는 조건은 무조건 작성
 *             => 게임 : ESC종료
 *     }
 *     
 *     
 *   = do~while : while문과 동일 => 후조건 검색
 *                무조건 한번이상 수행
 *     초기값
 *     do
 *     {
 *        반복 수행문장
 *        증감식
 *     } while(조건문)
 *   
 *   = 반복제어문장
 *       = break : 반복을 종료시에 사용
 *                 for,while,do~while => 무조건 종료
 *       = continue : 특정부분을 제외시에 사용
 *                 for ==> 증가식으로 이동
 *                 while ==> 조건식으로 이동 => 무한루프가 걸릴 수 있다.
 *                 => 반복문에서만 사용이 가능
 *   *** 소속 반복문만 제어
 *   
 *   이름이 있는 break
 *   outer:for(1)
 *   {
 *       for(2)
 *       {
 *           break => 2번 for문만 제어
 *           break outer => 이름 있는 부분을 제어
 *       }
 *   }
 */
public class 제어문정리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
