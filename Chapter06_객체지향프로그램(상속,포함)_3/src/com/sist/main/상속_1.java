package com.sist.main;
/*
 * 상속
 *  => 기존의 클래스를 재사용 (메소드 변경, 메소드 추가)
 *  => extends
 *  => 단일 상속
 *  => 객체지향
 *        재사용 ,데이터 손실 방지 / 변경이 쉽게 , 추가 가능
 *                       ㅣ캡슐화           ㅣ다형성(오버라이딩,오버로딩)
 *        ----------------------------------------------
 *        ㅣ 상속 
 *        => 제약조건이 많다
 *        => 소스를 볼 수 없다 => 분석 (가독성)
 *        => 상위 클래스 => 하위 클래스 메모리 할당 => 실행 속도가 늦다
 *        => 상속 => 보완 : *** 인터페이스 (구현)
 *        '
 *        1) 장점
 *             => 중복을 제거
 *             => 코드가 간결하다
 *             => 메소드 기능을 필요시마다 변경이 가능
 *             
 *             => 상위 클래스
 *                    : 공통적인 기능
 *                     영화관 : 포스터 출력 / 예약 / 극장 / 회원가입 / 로그인
 *                                  영화관
 *                                      ㅣ
 *                           -----------------------
 *                          ㅣ           ㅣ               ㅣ              
 *                          CGV / 롯데시네마 / 메가박스
 *                                                   상속받은 내용을 변경 => 오버라이딩
 *             => 하위 클래스
 *             => 상속을 받으면 데이터형이 두개가 생성된다.
 *             
 *             클래스 => 사용자 정의 데이터형이다
 *                            -----------------------
 *             메소드 : 사용자 정의 메소드
 *                        -----------------
 *             ==> 변경 (오버라이딩)
 *             오버라이딩 (메소드 재정의) => 덮어쓴다
 *                                                      -------- 구조가 동일
 *            1) 상속이 존재 => 클래스에서 상속없이 재정의(오버라이딩)
 *                                      => 익명의 클래스
 *            2) 메소드가 동일
 *            3) 매개변수가 동일
 *            4) 리턴형이 동일
 *            5) 접근지정어 확장이 가능 / 축소하면 오류 발생
 *            ---------------------------------------------
 *            상위 클래스를 이용한다
 *            ㅣ관련된 클래스를 여러개 묶어서 사용
 *            ㅣ 한개의 객체명으로 처리가 가능
 *            ㅣ한개의 객체명으로 처리가 가능
 *            ㅣ변수 많거나 / 객체가 많으면
 *               ------------------------ 제어가 어렵다
 *                 ㅣ한개의 이름으로 제어하는 방법
 *                    ------------------- 상위 클래스 / 인터페이스 (스프링의 기반)
 *                                                                    ㅣ클래스의 일종
 *  
 * => 상속시 예외 조건 / 접근 지정어
 *       --------------    ------------
 *       ㅣstatic                 ㅣprivate : 접근이 불가능
 *       ㅏ생성자
 *       ㅣ초기화
 * => 상속이 있는 경우
 *       생성자 => 매개변수가 있다면
 */
class A {
	
	public A(String s) {
		System.out.println(s);
	}
}
class B extends A{

	public B(String s) { 
		super(s);//상위 클래스 메모리 할당
		// TODO Auto-generated constructor stub
	}

}
public class 상속_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
