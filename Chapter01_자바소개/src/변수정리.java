/*
 * 데이터 저장 ===> 데이터 활용 ===> 결과값추출
 *                ㅣ 연산자/제어문
 * ======================     ========
 *    모든 프로그램이 동일           Application: 윈도우, 명령프롬프트
 *                             Web Application : 브라우저 (HTML)
 *                             Mobile Application : 안드로이드
 * 데이터 저장 : 한개 / 여러개 한번에 저장
 * 			   ㅣ   =============
 * 			  변수     배열 / 클래스 ===> 메모리에 저장(휘발성)
 *            ===
 *            
 *        int a1 ~ a200;
 *        
 * 변수 : 데이터를 저장하는 메모리 공간의 이름
 *                    ======== 숫자 (주소)로 되어있음 => c언어 &로 주소를 가져올수있음
 *                    자바의 장점 : C/C++에서 파생
 *                               ======= 어려운 부분을 제거
 *                               주소 / 포인터 / 구조체
 *                    => 주소/ 포인터 => HW(하드웨어)
 *                    => SW => 고급언어
 *         int a = 10;
 *         int b = 20;
 * 0=================
 * 	     사용중
 * 4================= ==> a
 * 		  10
 * 8=================
 * 	     사용중 
 * 12=================
 *  	 사용중
 * 16================= ==> b   b=100
 * 		  20 => 100
 * =================
 * 
 * 1. 메모리 공간 크기 => 자료형, 데이터형, 데이터타입 ...
 * 				     ============
 *                   1) 자바에서 지원 => 기본형
 *                   2) 사용자정의 => 데이터형을 직접 제작
 *                       => class
 *                       class A
 *                       {
 *                       int a, b, c, d;
 *                       
 *                       }
 * 2. 자바에서 지원하는 데이터형
 * 	  정수
 *      byte => 1byte (-128 ~127) : 전송 / 읽기
 *                           파일 / 네트워크 관련
 *      int => 컴퓨터는 모든 숫자를 int로 인식
 *      		-21억 4천 ~ 21억 4천
 *      		 => default
 *      		 => 가장 많이 사용되는 데이터형
 *      long => 빅데이터 => int => long
 *              금융/국세청 
 *      ==================== 기억 : int / long 구분은 숫자뒤에(L,l)
 *    실수
 *    	double : 실수의 디폴트 => 컴퓨터는 실수는 무조건 double로 인식
 *    				8byte => 소수점 15자리
 *    문자
 *    	char : 문자 한개 저장 => ''
 *             2byte => 0~65535 => 멀티바이트 (유니코드)
 *                      각국의 언어 다 사용할 수 있다
 *    논리
 *    	boolean : 1byte => true/false만 저자이 가능
 *                => 조건문 / 반복문
 * 
 * 3. 변수 선언
 *    1) *** 선언과 동시에 값을 저장 ex) int a = 10
 *       데이터형 변수명 = 값
 *    2) 선언 후 값을 저장  ex) int a  a=10
 *       데이터형 변수명;
 *       변수명 = 값;
 *    3) 같은 데이터형을 가지고 있는 경우
 *       int a;
 *       int b;
 *       int c;
 *       
 *       int a,b,c;
 * 
 * 4. 변수는 반드시 초기화를 => 처음에 저장하는 값을 지정해줘야함
 *     ===============
 *     int a=10 => 명시적 초기화
 *     int a=Math.random() => 컴퓨터 임의의 추출
 *     int a=scan.nextInt() => 사용자로부터 입력값을 받아서 초기화
 *     ==> 웹 / 윈도우 프로그램은 입력값 처리
 * 5. 변수명 제작 (식별자)
 *    => 같은 변수명 사용 불가
 *    
 *    1) 알파벳 ,한글로 시작 (알파벳은 대소문자 구분)
 *    2) 숫자는 앞에 사용 금지 => 뒤에서 사용가능
 *    	a1, a1b
 *    3) 특수문자 사용 : _, $
 *    4) 키워드 , 예약어 => 자바에서 이미 사용중에 있는 단어
 *       int int(x) int double(x)
 *       => 빨간색 단어는 키워드
 *    5) 공백은 사용할 수 없다
 *    	int a b(x)
 *    
 *    6) 문법은 아니다
 *    	 => 변수: 소문자로 시작한다
 *    				mainClass
 *       => 상수: 모든문자 대문자로 한다
 *       => 클래스: 첫자는 대문자
 *       			MainClass
 *       => 메소드: 소문자로 시작한다
 *       			mainClass()
 *    class Main
 *    {
 *    		Main main = new Main();
 *    }
 * **=> 26페이지 => 변수선언 형식 / 식별자
 * => 28page => 변수의 초기화
 * **=> 30page => 지원하는 데이터형
 * => 35page => 예약어
 * 
 * => 변수
 *    멤버변수
 *    공유변수
 *    지역변수 ==========> 관리 => 메모리가 한다
 *                      {}을 벗어나면 사라짐
 *                      => 반드시 초기화
 *      = 루프변수
 *      = 누적변수
 *      = 플로그변수 
 * 
 * => 문법 => 책
 *   =========
 *   사용처 => 객체지향
 * 
 */
public class 변수정리 {
	// 멤버변수 / 공유변수
	public static void main(String[] args) {
		//지역변수
	}
}
